// Issue Tracker Database Schema Setup
// Create indexes for all collections

// Users collection indexes
db.users.createIndex({ "email": 1 }, { unique: true })
db.users.createIndex({ "role": 1 })

// Bugs collection indexes
db.bugs.createIndex({ "authorId": 1 })
db.bugs.createIndex({ "assignedToId": 1 })
db.bugs.createIndex({ "classification": 1 })
db.bugs.createIndex({ "isClosed": 1 })
db.bugs.createIndex({ "dateCreated": -1 })

// Comments collection indexes
db.comments.createIndex({ "bugId": 1 })
db.comments.createIndex({ "authorId": 1 })

// TestCases collection indexes
db.testCases.createIndex({ "bugId": 1 })
db.testCases.createIndex({ "status": 1 })

// TimeEntries collection indexes
db.timeEntries.createIndex({ "bugId": 1 })
db.timeEntries.createIndex({ "developerId": 1 })

// EditHistory collection indexes
db.editHistory.createIndex({ "bugId": 1 })
db.editHistory.createIndex({ "editedBy": 1 })
db.editHistory.createIndex({ "dateChanged": -1 })

// Insert sample data
// Users
db.users.insertMany([
  {
    _id: ObjectId("507f1f77bcf86cd799439011"),
    email: "john.developer@company.com",
    password: "hashedPassword123",
    fullName: "John Developer",
    givenName: "John",
    familyName: "Developer",
    role: "Developer"
  },
  {
    _id: ObjectId("507f1f77bcf86cd799439012"),
    email: "jane.qa@company.com",
    password: "hashedPassword456",
    fullName: "Jane Quality",
    givenName: "Jane",
    familyName: "Quality",
    role: "Quality Analyst"
  },
  {
    _id: ObjectId("507f1f77bcf86cd799439013"),
    email: "bob.ba@company.com",
    password: "hashedPassword789",
    fullName: "Bob Business",
    givenName: "Bob",
    familyName: "Business",
    role: "Business Analyst"
  }
])

// Bugs
db.bugs.insertMany([
  {
    _id: ObjectId("507f1f77bcf86cd799439021"),
    title: "Login page crashes on mobile",
    description: "The login page crashes when accessed from mobile browsers",
    stepsToReproduce: "1. Open mobile browser 2. Navigate to login page 3. Enter credentials 4. Click login",
    authorId: ObjectId("507f1f77bcf86cd799439012"),
    assignedToId: ObjectId("507f1f77bcf86cd799439011"),
    dateCreated: new Date("2024-01-15T10:30:00Z"),
    classification: "approved",
    isClosed: false,
    fixedVersion: null,
    fixedDate: null
  },
  {
    _id: ObjectId("507f1f77bcf86cd799439022"),
    title: "Search results not displaying",
    description: "Search functionality returns no results even with valid queries",
    stepsToReproduce: "1. Navigate to search page 2. Enter valid search term 3. Click search button",
    authorId: ObjectId("507f1f77bcf86cd799439013"),
    assignedToId: null,
    dateCreated: new Date("2024-01-16T14:20:00Z"),
    classification: "unclassified",
    isClosed: false,
    fixedVersion: null,
    fixedDate: null
  }
])

// Comments
db.comments.insertMany([
  {
    _id: ObjectId("507f1f77bcf86cd799439031"),
    bugId: ObjectId("507f1f77bcf86cd799439021"),
    authorId: ObjectId("507f1f77bcf86cd799439011"),
    content: "I can reproduce this issue on Chrome mobile. Looking into the CSS media queries.",
    dateCreated: new Date("2024-01-15T15:45:00Z")
  },
  {
    _id: ObjectId("507f1f77bcf86cd799439032"),
    bugId: ObjectId("507f1f77bcf86cd799439022"),
    authorId: ObjectId("507f1f77bcf86cd799439012"),
    content: "I tested this and confirmed the issue exists. Search API seems to be returning empty results.",
    dateCreated: new Date("2024-01-16T16:10:00Z")
  }
])

// TestCases
db.testCases.insertMany([
  {
    _id: ObjectId("507f1f77bcf86cd799439041"),
    bugId: ObjectId("507f1f77bcf86cd799439021"),
    description: "Test login on iPhone Safari",
    status: "failed",
    createdBy: ObjectId("507f1f77bcf86cd799439012"),
    dateCreated: new Date("2024-01-15T12:00:00Z")
  },
  {
    _id: ObjectId("507f1f77bcf86cd799439042"),
    bugId: ObjectId("507f1f77bcf86cd799439021"),
    description: "Test login on Android Chrome",
    status: "failed",
    createdBy: ObjectId("507f1f77bcf86cd799439012"),
    dateCreated: new Date("2024-01-15T12:15:00Z")
  }
])

// TimeEntries
db.timeEntries.insertMany([
  {
    _id: ObjectId("507f1f77bcf86cd799439051"),
    bugId: ObjectId("507f1f77bcf86cd799439021"),
    developerId: ObjectId("507f1f77bcf86cd799439011"),
    hoursWorked: 3.5,
    dateLogged: new Date("2024-01-15T17:00:00Z")
  },
  {
    _id: ObjectId("507f1f77bcf86cd799439052"),
    bugId: ObjectId("507f1f77bcf86cd799439021"),
    developerId: ObjectId("507f1f77bcf86cd799439011"),
    hoursWorked: 2.0,
    dateLogged: new Date("2024-01-16T10:00:00Z")
  }
])

// EditHistory
db.editHistory.insertMany([
  {
    _id: ObjectId("507f1f77bcf86cd799439061"),
    bugId: ObjectId("507f1f77bcf86cd799439021"),
    editedBy: ObjectId("507f1f77bcf86cd799439013"),
    fieldChanged: "classification",
    oldValue: "unclassified",
    newValue: "approved",
    dateChanged: new Date("2024-01-15T11:30:00Z")
  },
  {
    _id: ObjectId("507f1f77bcf86cd799439062"),
    bugId: ObjectId("507f1f77bcf86cd799439021"),
    editedBy: ObjectId("507f1f77bcf86cd799439013"),
    fieldChanged: "assignedToId",
    oldValue: null,
    newValue: ObjectId("507f1f77bcf86cd799439011"),
    dateChanged: new Date("2024-01-15T11:35:00Z")
  }
])